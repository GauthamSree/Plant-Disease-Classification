{"version":3,"sources":["Components/Header.js","Components/Footer.js","Components/FileUpload.js","Components/Result.js","Components/Constants.js","Components/PredClasses.js","Components/Progress.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","to","activeClassName","exact","href","rel","target","Footer","FileUpload","onPredict","onFileUpload","onCancelImage","onSample","inputRef","useRef","id","onClick","src","alt","ref","type","onChange","accept","hidden","current","click","Result","Prediction","Confidence","classes","PredClasses","Constants","map","classname","idx","Progress","App","instance","axios","create","baseURL","process","REACT_APP_API_URL","useState","prediction","setPrediction","formData","setFileUploaded","isPredicting","setIsPredicting","noPrediction","length","e","a","post","timeout","then","response","data","console","log","error","document","getElementById","innerHTML","imgBox","text","cancelBtn","get","responseType","headers","file","File","form","FormData","append","URL","createObjectURL","style","display","useEffect","path","fileSelected","files","reader","FileReader","onloadend","result","readAsDataURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.395f7560.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom'\nimport './Header.css'\n\nconst Header = () =>  {\n    return( \n    <div className='headerContainer'>\n        <header>\n            <NavLink to='/' activeClassName=\"is_active\" exact={true}><h1 className=\"header_title\">Plant Disease Classification</h1></NavLink>\n            <nav>\n                <ul className=\"nav_links\">\n                    <li><NavLink to='/prediction_classes' activeClassName=\"is_active\" exact={true}><i className=\"fas fa-scroll\"></i> Prediction Labels</NavLink></li>\n                    <li><a href=\"https://github.com/GauthamSree/Plant-Leaf-Disease-Classification\" rel=\"noreferrer\" target=\"_blank\"><i className=\"fab fa-github\"></i> GitHub</a></li>\n                    <li><a href=\"http://linkedin.com/in/gautham-sreekumar-5662b318b\" rel=\"noreferrer\" target=\"_blank\"><i className=\"fab fa-linkedin\"></i> LinkedIn</a></li>\n                </ul>\n            </nav>\n        </header>\n    </div>\n    )\n}\n\nexport default Header;","import './Footer.css'\n\nconst Footer = () => {\n    return( \n    <div className='footwrapper'>\n        <footer>\n            <div> \n                <p>\n                    This website can be used to predict plant disease which uses a image classification \n                    model to predict the disease. User can click on \"Try Out Sample\" to test few random \n                    images pulled from backend and predicted on our trained Model. The result shows the \n                    prediction class to which the image uploaded belongs to and the confidence of the model prediction.\n                </p>\n            </div>\n            <div className='byclass'>By Gautham Sreekumar</div>\n        </footer>\n    </div>\n    )\n}\n\nexport default Footer;","import './FileUpload.css'\nimport React, { useRef } from 'react'\n\nconst FileUpload = ( { onPredict, onFileUpload, onCancelImage, onSample } ) =>  {\n    const inputRef = useRef()\n    return( \n    <div>\n        <div className=\"wrapper\">\n            <div className=\"formContainer\">\n                <div className=\"imageContainer\">\n                    <div className=\"imageHolder\">\n                        <button id=\"cancel-btn\" onClick={onCancelImage}><i className=\"fas fa-times\"></i></button>\n                        <img id=\"imageid\" src=\"\" alt=\"No file Uploaded\"></img>\n                        <span id=\"imagespan\"><i className=\"fas fa-cloud-upload-alt\"></i> Image Preview</span>\n                    </div>\n                </div>\n                <div className=\"buttonContainer\">\n                    <input ref={inputRef} type=\"file\" onChange={onFileUpload} accept=\"image/*\" hidden=\"hidden\"></input>\n                    <button id=\"custom-button\" onClick= {() => {\n                        inputRef.current.click()\n                    }}>Choose an Image</button>\n                    <button onClick={onSample}>Try Out Sample</button>\n                    <button onClick={onPredict}>Predict</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default FileUpload;\n\n\n","import './Result.css'\n\nconst Result = ({Prediction, Confidence}) =>  {\n    return (\n    <div>\n        <div className=\"box\">\n            <h3>Result</h3>\n            <div className=\"field\">\n                <span>Prediction: <span className='resultText'>{Prediction}</span></span>\n                <span>Confidence: <span className='resultText'>{Confidence}</span></span>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Result;","export const classes = ['Apple -- Apple Scab',\n    'Apple -- Black Rot',\n    'Apple -- Cedar Apple Rust',\n    'Apple -- Healthy',\n    'Cherry -- Powdery Mildew',\n    'Cherry --  Healthy',\n    'Corn -- Gray Leaf Spot (Cercospora Leaf Spot)',\n    'Corn -- Common Rust',\n    'Corn -- Northern Leaf Blight',\n    'Corn -- Healthy',\n    'Grape -- Black Rot',\n    'Grape -- Esca (Black Measles)',\n    'Grape -- Leaf Blight (Isariopsis Leaf Spot)',\n    'Grape -- Healthy',\n    'Peach -- Bacterial_spot',\n    'Peach -- Healthy',\n    'Pepper Bell -- Bacterial Spot',\n    'Pepper Bell -- Healthy',\n    'Potato -- Early Blight',\n    'Potato -- Late Blight',\n    'Potato -- Healthy',\n    'Strawberry -- Leaf Scorch',\n    'Strawberry -- Healthy',\n    'Tomato -- Bacterial Spot',\n    'Tomato -- Early Blight',\n    'Tomato -- Late Blight',\n    'Tomato -- Leaf Mold',\n    'Tomato -- Septoria Leaf Spot',\n    'Tomato -- Two-spotted Spider Mites',\n    'Tomato -- Target Spot',\n    'Tomato -- Yellow Leaf Curl Virus',\n    'Tomato -- Mosaic Virus',\n    'Tomato -- Healthy']","import * as Constants from './Constants'\nimport './PredClasses.css'\n\nconst PredClasses = () =>  {\n    return(\n    <div className=\"Predwrapper\">\n        <div className=\"boxContainer\">\n            <h3>Description</h3>\n            <div> \n                <p>\n                    The model developed using EfficientNet B3 deep learning architecture helps \n                    to predict plant leaf diseases from leaf images. The accuracy of the model is 99.875%.\n                    PyTorch was used to train this model using the mixed precision functionality (torch.cuda.amp.GradScaler).  \n                    Early Stopping callback was used to avoid overfitting of the model, \n                    which monitors performance of the loss value on validation split.\n                </p>\n            </div>\n        </div>\n        <div className=\"boxContainer\">\n            <h3>Prediction Classes</h3>\n            <div className=\"classContainer\"> \n                {\n                    Constants.classes.map((classname, idx) => \n                    <div id={idx} className=\"fieldText\"><span>{idx + 1} : <span className='resultText'>{classname}</span></span></div>)\n                }\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default PredClasses;","const Progress = () =>  {\n    return (\n    <div>\n        <div className=\"box\">\n            <h3>Result</h3>\n            <div id=\"progress\" className=\"field\">\n                Predicting... Please Wait!\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Progress;","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport Header from './Components/Header'\nimport Footer from './Components/Footer'\nimport FileUpload from './Components/FileUpload'\nimport Result from './Components/Result'\nimport PredClasses from './Components/PredClasses'\nimport Progress from './Components/Progress'\nimport axios from \"axios\";\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\n\nfunction App() {\n  \n  const instance = axios.create({\n     baseURL: process.env.REACT_APP_API_URL || \"https://plant-disease-fastapi.herokuapp.com/api\"\n  })\n  \n  const [prediction, setPrediction] = useState([])\n  const [formData, setFileUploaded] = useState([])\n  const [isPredicting, setIsPredicting] = useState(false)\n  const noPrediction = !prediction || (prediction && prediction.length === 0)\n  \n  const onFileUpload = (e) => {\n    let form = new FormData()\n    let fileSelected = e.target.files[0] \n    form.append('file', fileSelected)\n    setFileUploaded(form)\n    console.log(fileSelected)\n    try {\n      let reader = new FileReader()\n      reader.onloadend = () => {\n        const imgBox = document.getElementById('imageid')\n        const text = document.getElementById('imagespan')\n        const cancelBtn = document.getElementById('cancel-btn')\n        imgBox.src = reader.result;\n        imgBox.style.display = \"block\";\n        cancelBtn.style.display = \"block\";\n        text.style.display = \"none\";\n      }\n      reader.readAsDataURL(fileSelected)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n  \n  const onPredict = async (e) => {\n    setIsPredicting(true)\n    instance.post('/predict/', formData, {timeout: 60 * 30 * 1000})\n    .then((response) => {\n      setIsPredicting(false)\n      setPrediction(response.data)\n      console.log(response.data)\n    }, (error) => {\n      document.getElementById(\"progress\").innerHTML = \"Response Timeout. Please Try Again\";\n      console.log(error)\n    });\n  }\n\n  const onCancelImage = () => {\n    setFileUploaded([])\n    setPrediction([])\n    setIsPredicting(false)\n    const imgBox = document.getElementById('imageid')\n    const text = document.getElementById('imagespan')\n    const cancelBtn = document.getElementById('cancel-btn')\n    imgBox.src = '';\n    imgBox.alt = \"No file Uploaded\";\n    imgBox.style.display = \"none\";\n    cancelBtn.style.display = \"none\";\n    text.style.display = \"block\";\n  }\n\n  const onSample = async () => {\n    const imgBox = document.getElementById('imageid')\n    const text = document.getElementById('imagespan')\n    const cancelBtn = document.getElementById('cancel-btn')\n    instance.get('/sample_image/', { \n      responseType: 'blob',\n      headers: {\n        'Cache-Control': 'no-store',\n        'Pragma': 'no-cache',\n      }\n    }).then((response) => {\n      const file = new File([response.data], \"image.jpg\")\n      let form = new FormData()\n      form.append('file', file)\n      setFileUploaded(form)\n      imgBox.src = URL.createObjectURL(response.data);\n      console.log(response.data)\n    }, (error) => {\n      console.log(error)\n    });\n    imgBox.alt = \"Backend not yet started\";    \n    imgBox.style.display = \"block\";\n    cancelBtn.style.display = \"block\";\n    text.style.display = \"none\";\n  }\n\n  useEffect(() => {\n    instance.get('/').then((response) => {\n      console.log(response.data)\n    }, (error) => {\n      console.log(error)\n    });\n  });\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <FileUpload onPredict={onPredict} onFileUpload={onFileUpload} onCancelImage={onCancelImage} onSample={onSample} />\n            {isPredicting && <Progress />}\n            {!noPrediction && <Result {...prediction}/>}\n          </Route>\n          <Route exact path=\"/prediction_classes\">\n            <PredClasses />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}